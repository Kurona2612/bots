const Discord = require('discord.js');
const client = new Discord.Client({
  intents: [
    Discord.GatewayIntentBits.Guilds,
    Discord.GatewayIntentBits.GuildMessages,
    Discord.GatewayIntentBits.GuildMembers,
    Discord.GatewayIntentBits.MessageContent
  ]
});
const config = require('./config.json');
const { QuickDB } = require('quick.db');
const db = new QuickDB();
const ms = require('ms');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
const economy = db.table('economy');
const levels = db.table('levels');
const warns = db.table('warns');
const farming = db.table('farming');
const modRoles = db.table('modRoles');
const adminRoles = db.table('adminRoles');
const premium = db.table('premium');
const logChannels = db.table('logChannels');
const joinChannels = db.table('joinChannels');
const tickets = db.table('tickets');
const ticketSettings = db.table('ticketSettings');
const businesses = db.table('businesses'); // –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –±–∏–∑–Ω–µ—Å–æ–≤

// –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–µ—Ä–º–µ—Ä—Å—Ç–≤–∞
const shopItems = [
  { id: 1, name: "–ü–æ–º–∏–¥–æ—Ä", emoji: "üçÖ", price: 100, minReward: 100, maxReward: 200, time: 10, description: "–ë—ã—Å—Ç—Ä–æ—Ä–∞—Å—Ç—É—â–∏–π –æ–≤–æ—â" },
  { id: 2, name: "–ú–æ—Ä–∫–æ–≤—å", emoji: "ü•ï", price: 50, minReward: 50, maxReward: 100, time: 5, description: "–†–∞—Å—Ç–µ—Ç –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ" },
  { id: 3, name: "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å", emoji: "ü•î", price: 80, minReward: 150, maxReward: 300, time: 20, description: "–°—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥" },
  { id: 4, name: "–ë–∞–∫–ª–∞–∂–∞–Ω", emoji: "üçÜ", price: 120, minReward: 180, maxReward: 250, time: 15, description: "–≠–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–π –æ–≤–æ—â" },
  { id: 5, name: "–ü–µ—Ä–µ—Ü", emoji: "üå∂Ô∏è", price: 150, minReward: 200, maxReward: 400, time: 25, description: "–û—Å—Ç—Ä—ã–π –∏ –ø—Ä–∏–±—ã–ª—å–Ω—ã–π" },
  { id: 6, name: "–ö—É–∫—É—Ä—É–∑–∞", emoji: "üåΩ", price: 200, minReward: 300, maxReward: 500, time: 30, description: "–î–æ–ª–≥–æ, –Ω–æ –æ–∫—É–ø–∞–µ—Ç—Å—è" },
  { id: 7, name: "–ì—Ä–∏–±", emoji: "üçÑ", price: 75, minReward: 120, maxReward: 350, time: 12, description: "–†–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä" },
  { id: 8, name: "–ê–Ω–∞–Ω–∞—Å", emoji: "üçç", price: 300, minReward: 500, maxReward: 800, time: 45, description: "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Ñ—Ä—É–∫—Ç" },
  { id: 9, name: "–ö–ª—É–±–Ω–∏–∫–∞", emoji: "üçì", price: 180, minReward: 250, maxReward: 450, time: 18, description: "–°–ª–∞–¥–∫–∞—è —è–≥–æ–¥–∞" },
  { id: 10, name: "–î—Ä–∞–∫–æ–Ω–∏–π —Ñ—Ä—É–∫—Ç", emoji: "üêâ", price: 500, minReward: 800, maxReward: 1500, time: 60, description: "–†–µ–¥–∫–∏–π –∏ —Ü–µ–Ω–Ω—ã–π" }
];

// –î–∞–Ω–Ω—ã–µ –æ –±–∏–∑–Ω–µ—Å–∞—Ö
const businessTypes = [
  { 
    id: 1, 
    name: "–õ–∞–≤–∫–∞ —Ñ–µ—Ä–º–µ—Ä–∞", 
    emoji: "üåæ", 
    price: 10000, 
    baseIncome: 500, 
    description: "–ü—Ä–æ–¥–∞–µ—Ç —Å–≤–µ–∂–∏–µ –æ–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã",
    upgradeCost: 5000 
  },
  { 
    id: 2, 
    name: "–ú–∞–≥–∞–∑–∏–Ω —Ç–µ—Ö–Ω–∏–∫–∏", 
    emoji: "üîß", 
    price: 25000, 
    baseIncome: 1200, 
    description: "–†–µ–º–æ–Ω—Ç–∏—Ä—É–µ—Ç –∏ –ø—Ä–æ–¥–∞–µ—Ç –≥–∞–¥–∂–µ—Ç—ã",
    upgradeCost: 10000 
  },
  { 
    id: 3, 
    name: "–ö–æ—Ñ–µ–π–Ω—è", 
    emoji: "‚òï", 
    price: 50000, 
    baseIncome: 2500, 
    description: "–ì–æ—Ç–æ–≤–∏—Ç –ª—É—á—à–∏–π –∫–æ—Ñ–µ –≤ –≥–æ—Ä–æ–¥–µ",
    upgradeCost: 15000 
  },
  { 
    id: 4, 
    name: "–ö—Ä–∏–ø—Ç–æ-—Ñ–µ—Ä–º–∞", 
    emoji: "üí∞", 
    price: 100000, 
    baseIncome: 5000, 
    description: "–î–æ–±—ã–≤–∞–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É (—Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å)",
    upgradeCost: 30000 
  }
];

let currentShop = shopItems.slice(0, 5);
let lastShopUpdate = Date.now();

// –§—É–Ω–∫—Ü–∏–∏
function createProgressBar(percentage, length = 10) {
  const filled = Math.round(percentage * length);
  return '‚ñ∞'.repeat(filled) + '‚ñ±'.repeat(length - filled);
}

function createErrorEmbed(description) {
  return new Discord.EmbedBuilder()
    .setColor('#ff0000')
    .setDescription(description)
    .setTimestamp();
}

function createSuccessEmbed(description) {
  return new Discord.EmbedBuilder()
    .setColor('#00ff00')
    .setDescription(description)
    .setTimestamp();
}

async function isMod(member) {
  const roles = await modRoles.get(`roles_${member.guild.id}`) || [];
  return member.permissions.has(Discord.PermissionFlagsBits.ManageMessages) || 
         roles.some(r => member.roles.cache.has(r));
}

async function isAdmin(member) {
  const roles = await adminRoles.get(`roles_${member.guild.id}`) || [];
  return member.permissions.has(Discord.PermissionFlagsBits.Administrator) || 
         roles.some(r => member.roles.cache.has(r));
}

async function isPremium(userId) {
  const data = await premium.get(`user_${userId}`);
  return data?.expires > Date.now();
}

function getPremiumMultiplier(userId) {
  return isPremium(userId) ? 1.2 : 1.0;
}

function updateShop() {
  currentShop = [...shopItems].sort(() => 0.5 - Math.random()).slice(0, 5);
  lastShopUpdate = Date.now();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–∞ –±–∏–∑–Ω–µ—Å–∞
function calculateBusinessIncome(business, level) {
  let income = business.baseIncome * level;
  // –ö—Ä–∏–ø—Ç–æ-—Ñ–µ—Ä–º–∞ –º–æ–∂–µ—Ç –¥–∞—Ç—å 0 –∏–ª–∏ x2
  if (business.id === 4 && Math.random() < 0.3) return 0;
  if (business.id === 4 && Math.random() < 0.1) return income * 2;
  return income;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
async function sendModLog(action, target, moderator, reason = '–ù–µ —É–∫–∞–∑–∞–Ω–∞', duration = null, guild) {
  const channelId = await logChannels.get(`modLog_${guild.id}`);
  if (!channelId) return;
  
  const channel = guild.channels.cache.get(channelId);
  if (!channel) return;
  
  const embed = new Discord.EmbedBuilder()
    .setTitle(`üõ° –î–µ–π—Å—Ç–≤–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞`)
    .setColor('#ff9900')
    .addFields(
      { name: '–î–µ–π—Å—Ç–≤–∏–µ', value: action, inline: true },
      { name: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', value: `${moderator} (${moderator.id})`, inline: true },
      { name: '–£—á–∞—Å—Ç–Ω–∏–∫', value: `${target} (${target.id})`, inline: true },
      { name: '–ü—Ä–∏—á–∏–Ω–∞', value: reason }
    )
    .setTimestamp();
  
  if (duration) embed.addFields({ name: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', value: ms(duration, { long: true }) });
  
  channel.send({ embeds: [embed] }).catch(console.error);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
async function sendUserLog(action, user, guild, details = '') {
  const channelId = await logChannels.get(`userLog_${guild.id}`);
  if (!channelId) return;
  
  const channel = guild.channels.cache.get(channelId);
  if (!channel) return;
  
  const embed = new Discord.EmbedBuilder()
    .setTitle(`üë§ –î–µ–π—Å—Ç–≤–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞`)
    .setColor('#00b0f4')
    .addFields(
      { name: '–î–µ–π—Å—Ç–≤–∏–µ', value: action },
      { name: '–£—á–∞—Å—Ç–Ω–∏–∫', value: `${user} (${user.id})` },
      { name: '–î–µ—Ç–∞–ª–∏', value: details || '–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏' }
    )
    .setTimestamp();
  
  channel.send({ embeds: [embed] }).catch(console.error);
}

// ========== –°–ò–°–¢–ï–ú–ê –¢–ò–ö–ï–¢–û–í ==========
async function createTicket(guild, user, categoryName = 'default') {
  const categoryId = await ticketSettings.get(`category_${guild.id}_${categoryName}`);
  if (!categoryId) return null;

  const ticketCount = (await tickets.get(`count_${guild.id}`) || 0) + 1;
  await tickets.set(`count_${guild.id}`, ticketCount);

  const channelName = `ticket-${ticketCount}`;
  
  const channel = await guild.channels.create({
    name: channelName,
    type: Discord.ChannelType.GuildText,
    parent: categoryId,
    permissionOverwrites: [
      {
        id: guild.id,
        deny: [Discord.PermissionFlagsBits.ViewChannel]
      },
      {
        id: user.id,
        allow: [
          Discord.PermissionFlagsBits.ViewChannel,
          Discord.PermissionFlagsBits.SendMessages,
          Discord.PermissionFlagsBits.AttachFiles
        ]
      }
    ]
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
  const modRolesList = await modRoles.get(`roles_${guild.id}`) || [];
  for (const roleId of modRolesList) {
    await channel.permissionOverwrites.edit(roleId, {
      ViewChannel: true,
      SendMessages: true,
      ManageMessages: true
    });
  }

  await tickets.set(`ticket_${guild.id}_${channel.id}`, {
    user: user.id,
    category: categoryName,
    createdAt: Date.now(),
    status: 'open'
  });

  return channel;
}

async function closeTicket(channel) {
  await tickets.set(`ticket_${channel.guild.id}_${channel.id}.status`, 'closed');
  await channel.permissionOverwrites.edit(channel.guild.id, { ViewChannel: false });
  
  // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞
  const ticketData = await tickets.get(`ticket_${channel.guild.id}_${channel.id}`);
  if (ticketData) {
    const user = await client.users.fetch(ticketData.user).catch(() => null);
    await sendModLog(
      '–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç', 
      user || { id: ticketData.user, tag: 'Unknown#0000' }, 
      client.user, 
      `–ö–∞–Ω–∞–ª: ${channel.name}`,
      null,
      channel.guild
    );
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
client.on('ready', () => {
  console.log(`–ë–æ—Ç ${client.user.tag} –≥–æ—Ç–æ–≤!`);
  updateShop();
  setInterval(updateShop, 5 * 60 * 1000);
});

// –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
client.on('messageCreate', async message => {
  try {
    if (message.author.bot || !message.guild) return;
    
    // –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π
    const xpAdd = Math.floor(Math.random() * 10) + 5;
    const premiumBonus = await isPremium(message.author.id) ? 1.2 : 1.0;
    const finalXp = Math.floor(xpAdd * premiumBonus);
    
    const level = await levels.get(`level_${message.guild.id}_${message.author.id}`) || 0;
    const xp = await levels.get(`xp_${message.guild.id}_${message.author.id}`) || 0;
    const neededXP = level * 100 + 100;
    
    await levels.add(`xp_${message.guild.id}_${message.author.id}`, finalXp);
    
    if (xp + finalXp >= neededXP) {
      await levels.set(`xp_${message.guild.id}_${message.author.id}`, 0);
      await levels.add(`level_${message.guild.id}_${message.author.id}`, 1);
      const levelUpReward = (level + 1) * 100;
      await economy.add(`money_${message.guild.id}_${message.author.id}`, levelUpReward);
      
      const levelUpEmbed = new Discord.EmbedBuilder()
        .setTitle('üéâ –£—Ä–æ–≤–µ–Ω—å UP!')
        .setDescription(`–¢–µ–ø–µ—Ä—å —É –≤–∞—Å ${level + 1} —É—Ä–æ–≤–µ–Ω—å!`)
        .addFields({ name: '–ù–∞–≥—Ä–∞–¥–∞', value: `+${levelUpReward} –º–æ–Ω–µ—Ç` })
        .setColor('#00ff00')
        .setTimestamp();
      
      await message.reply({ embeds: [levelUpEmbed] });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if (!message.content.startsWith(config.prefix)) return;
    
    const args = message.content.slice(config.prefix.length).trim().split(/ +/);
    const command = args.shift().toLowerCase();

    // ========== –ë–ò–ó–ù–ï–°–´ ==========
    if (command === 'biz') {
      const subCommand = args[0]?.toLowerCase();

      if (!subCommand || subCommand === 'help') {
        const embed = new Discord.EmbedBuilder()
          .setTitle('üè¢ –ü–æ–º–æ—â—å –ø–æ –±–∏–∑–Ω–µ—Å–∞–º')
          .setDescription(`–ü—Ä–µ—Ñ–∏–∫—Å: \`${config.prefix}biz\``)
          .setColor('#3498db')
          .addFields(
            { name: '–ö–æ–º–∞–Ω–¥—ã', value: 
              '`list` - –°–ø–∏—Å–æ–∫ –±–∏–∑–Ω–µ—Å–æ–≤\n' +
              '`buy <id>` - –ö—É–ø–∏—Ç—å –±–∏–∑–Ω–µ—Å\n' +
              '`sell <id>` - –ü—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å\n' +
              '`upgrade <id>` - –£–ª—É—á—à–∏—Ç—å –±–∏–∑–Ω–µ—Å\n' +
              '`my` - –ú–æ–∏ –±–∏–∑–Ω–µ—Å—ã\n' +
              '`collect` - –ó–∞–±—Ä–∞—Ç—å –¥–æ—Ö–æ–¥' }
          );
        return message.reply({ embeds: [embed] });
      }

      if (subCommand === 'list') {
        const embed = new Discord.EmbedBuilder()
          .setTitle('üè™ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏–∑–Ω–µ—Å—ã')
          .setDescription('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `!biz buy <id>` –¥–ª—è –ø–æ–∫—É–ø–∫–∏')
          .setColor('#2ecc71');

        businessTypes.forEach(biz => {
          embed.addFields({
            name: `${biz.emoji} ${biz.name} (–¶–µ–Ω–∞: ${biz.price}üí∞)`,
            value: `${biz.description}\n–î–æ—Ö–æ–¥: ${biz.baseIncome}üí∞/—á–∞—Å`,
            inline: false
          });
        });

        return message.reply({ embeds: [embed] });
      }

      if (subCommand === 'buy') {
        const bizId = parseInt(args[1]);
        const business = businessTypes.find(b => b.id === bizId);
        
        if (!business) return message.reply({ embeds: [createErrorEmbed('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –±–∏–∑–Ω–µ—Å–∞')] });
        
        const balance = await economy.get(`money_${message.guild.id}_${message.author.id}`) || 0;
        if (balance < business.price) {
          return message.reply({ embeds: [createErrorEmbed(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. –ù—É–∂–Ω–æ: ${business.price}üí∞`)] });
        }

        const userBiz = await businesses.get(`user_${message.author.id}_${bizId}`);
        if (userBiz) {
          return message.reply({ embeds: [createErrorEmbed('‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç –±–∏–∑–Ω–µ—Å')] });
        }

        await businesses.set(`user_${message.author.id}_${bizId}`, {
          type: bizId,
          level: 1,
          lastCollect: Date.now(),
          profit: 0
        });

        await economy.sub(`money_${message.guild.id}_${message.author.id}`, business.price);
        
        const embed = new Discord.EmbedBuilder()
          .setTitle(`‚úÖ –í—ã –∫—É–ø–∏–ª–∏ ${business.emoji} ${business.name}`)
          .setDescription(`${business.description}\n–¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ ${business.baseIncome}üí∞ –∫–∞–∂–¥—ã–π —á–∞—Å`)
          .setColor('#2ecc71')
          .setFooter({ text: `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ${config.prefix}biz collect –¥–ª—è —Å–±–æ—Ä–∞ –¥–æ—Ö–æ–¥–∞` });
        
        return message.reply({ embeds: [embed] });
      }

      if (subCommand === 'my') {
        const userBusinesses = [];
        
        for (const biz of businessTypes) {
          const data = await businesses.get(`user_${message.author.id}_${biz.id}`);
          if (data) userBusinesses.push({ ...biz, ...data });
        }

        if (userBusinesses.length === 0) {
          return message.reply({ embeds: [createErrorEmbed('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–æ–≤')] });
        }

        const embed = new Discord.EmbedBuilder()
          .setTitle(`üè¶ –í–∞—à–∏ –±–∏–∑–Ω–µ—Å—ã (${userBusinesses.length}/4)`)
          .setColor('#f1c40f');

        userBusinesses.forEach(biz => {
          const income = calculateBusinessIncome(biz, biz.level);
          embed.addFields({
            name: `${biz.emoji} ${biz.name} (–£—Ä. ${biz.level})`,
            value: `–î–æ—Ö–æ–¥: ${income}üí∞/—á–∞—Å\n–ù–∞–∫–æ–ø–ª–µ–Ω–æ: ${biz.profit}üí∞`,
            inline: true
          });
        });

        return message.reply({ embeds: [embed] });
      }

      if (subCommand === 'collect') {
        let totalCollected = 0;
        const collectedBiz = [];
        
        for (const biz of businessTypes) {
          const data = await businesses.get(`user_${message.author.id}_${biz.id}`);
          if (data) {
            const hoursPassed = Math.floor((Date.now() - data.lastCollect) / (1000 * 60 * 60));
            if (hoursPassed > 0) {
              const income = calculateBusinessIncome(biz, data.level) * hoursPassed;
              await businesses.add(`user_${message.author.id}_${biz.id}.profit`, income);
              await businesses.set(`user_${message.author.id}_${biz.id}.lastCollect`, Date.now());
              totalCollected += income;
              collectedBiz.push(`${biz.emoji} ${biz.name}: ${income}üí∞`);
            }
          }
        }

        if (totalCollected === 0) {
          return message.reply({ embeds: [createErrorEmbed('‚ùå –ù–µ—Ç –¥–æ—Ö–æ–¥–∞ –¥–ª—è —Å–±–æ—Ä–∞')] });
        }

        await economy.add(`money_${message.guild.id}_${message.author.id}`, totalCollected);
        
        const embed = new Discord.EmbedBuilder()
          .setTitle(`üí∞ –í—ã —Å–æ–±—Ä–∞–ª–∏ –¥–æ—Ö–æ–¥`)
          .setDescription(`–û–±—â–∞—è —Å—É–º–º–∞: ${totalCollected}üí∞`)
          .setColor('#2ecc71')
          .addFields({
            name: '–ë–∏–∑–Ω–µ—Å—ã',
            value: collectedBiz.join('\n')
          });
        
        return message.reply({ embeds: [embed] });
      }

      if (subCommand === 'upgrade') {
        const bizId = parseInt(args[1]);
        const business = businessTypes.find(b => b.id === bizId);
        
        if (!business) return message.reply({ embeds: [createErrorEmbed('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –±–∏–∑–Ω–µ—Å–∞')] });
        
        const userBiz = await businesses.get(`user_${message.author.id}_${bizId}`);
        if (!userBiz) {
          return message.reply({ embeds: [createErrorEmbed('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞')] });
        }

        const upgradeCost = business.upgradeCost * userBiz.level;
        const balance = await economy.get(`money_${message.guild.id}_${message.author.id}`) || 0;
        
        if (balance < upgradeCost) {
          return message.reply({ embeds: [createErrorEmbed(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. –ù—É–∂–Ω–æ: ${upgradeCost}üí∞`)] });
        }

        await businesses.add(`user_${message.author.id}_${bizId}.level`, 1);
        await economy.sub(`money_${message.guild.id}_${message.author.id}`, upgradeCost);
        
        const newIncome = calculateBusinessIncome(business, userBiz.level + 1);
        
        const embed = new Discord.EmbedBuilder()
          .setTitle(`üÜô –í—ã —É–ª—É—á—à–∏–ª–∏ ${business.emoji} ${business.name}`)
          .setDescription(`–¢–µ–ø–µ—Ä—å —É—Ä–æ–≤–µ–Ω—å: ${userBiz.level + 1}\n–ù–æ–≤—ã–π –¥–æ—Ö–æ–¥: ${newIncome}üí∞/—á–∞—Å`)
          .setColor('#00ff00');
        
        return message.reply({ embeds: [embed] });
      }

      if (subCommand === 'sell') {
        const bizId = parseInt(args[1]);
        const business = businessTypes.find(b => b.id === bizId);
        
        if (!business) return message.reply({ embeds: [createErrorEmbed('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –±–∏–∑–Ω–µ—Å–∞')] });
        
        const userBiz = await businesses.get(`user_${message.author.id}_${bizId}`);
        if (!userBiz) {
          return message.reply({ embeds: [createErrorEmbed('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞')] });
        }

        // –ü—Ä–æ–¥–∞–∂–Ω–∞—è —Ü–µ–Ω–∞ = 60% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ + 50% –æ—Ç —É–ª—É—á—à–µ–Ω–∏–π
        const sellPrice = Math.floor((business.price * 0.6) + (business.upgradeCost * userBiz.level * 0.5));
        
        await businesses.delete(`user_${message.author.id}_${bizId}`);
        await economy.add(`money_${message.guild.id}_${message.author.id}`, sellPrice);
        
        const embed = new Discord.EmbedBuilder()
          .setTitle(`üõí –í—ã –ø—Ä–æ–¥–∞–ª–∏ ${business.emoji} ${business.name}`)
          .setDescription(`–ü–æ–ª—É—á–µ–Ω–æ: ${sellPrice}üí∞`)
          .setColor('#e74c3c');
        
        return message.reply({ embeds: [embed] });
      }
    }

    // ========== –¢–ò–ö–ï–¢–´ ==========
    if (command === 'ticket') {
      // ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ —Ç–∏–∫–µ—Ç–æ–≤ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    }

    // ========== –≠–ö–û–ù–û–ú–ò–ö–ê ==========
    if (command === 'economy') {
      // ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ —ç–∫–æ–Ω–æ–º–∏–∫–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    }

    // ========== –§–ï–†–ú–ï–†–°–¢–í–û ==========
    if (command === 'farming') {
      // ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ —Ñ–µ—Ä–º–µ—Ä—Å—Ç–≤–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    }

    // ========== –ú–û–î–ï–†–ê–¶–ò–Ø ==========
    if (command === 'a') {
      // ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    }

    // ========== –ü–†–ï–ú–ò–£–ú –°–ò–°–¢–ï–ú–ê ==========
    if (command === 'premium') {
      // ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –ø—Ä–µ–º–∏—É–º —Å–∏—Å—Ç–µ–º—ã –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
client.on('guildMemberAdd', async member => {
  // ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
});

client.on('guildMemberRemove', async member => {
  // ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
});

client.on('guildMemberUpdate', async (oldMember, newMember) => {
  // ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
});

client.login(config.token);